0: Pipeline(
	0: MaxAbsScaler()
	1: DecisionTreeClassifier(class_weight='balanced', criterion='entropy',
                       max_depth=28, max_features=0.5253960128423623,
                       min_samples_leaf=18, min_samples_split=7,
                       random_state=34)
) -> Fitness: 0.7843906540718477

1: Pipeline(
	0: DecisionTreeClassifier(class_weight='balanced', criterion='entropy',
                       max_depth=28, max_features=0.5253960128423623,
                       min_samples_leaf=18, min_samples_split=7,
                       random_state=34)
) -> Fitness: 0.7843906540718477

2: Pipeline(
	0: MinMaxScaler()
	1: DecisionTreeClassifier(class_weight='balanced', criterion='entropy',
                       max_depth=28, max_features=0.5253960128423623,
                       min_samples_leaf=18, min_samples_split=7,
                       random_state=34)
) -> Fitness: 0.7843906540718477

3: Pipeline(
	0: ExtraTreesClassifier(bootstrap=True, class_weight='balanced_subsample',
                     criterion='entropy', max_features='log2',
                     min_samples_leaf=6, n_estimators=16, random_state=34)
) -> Fitness: 0.7950461571489911

4: Pipeline(
	0: AdaBoostClassifier(algorithm='SAMME',
                   estimator=DecisionTreeClassifier(class_weight='balanced',
                                                    criterion='entropy',
                                                    max_depth=5,
                                                    max_features=0.827689379425907,
                                                    min_samples_leaf=11,
                                                    random_state=34),
                   learning_rate=0.28647243853835647, n_estimators=32,
                   random_state=34)
) -> Fitness: 0.7816605839416059

5: Pipeline(
	0: AdaBoostClassifier(algorithm='SAMME',
                   estimator=DecisionTreeClassifier(class_weight='balanced',
                                                    criterion='entropy',
                                                    max_depth=22,
                                                    max_features=0.1601479999493549,
                                                    min_samples_leaf=12,
                                                    min_samples_split=7,
                                                    random_state=34),
                   learning_rate=0.28647243853835647, n_estimators=32,
                   random_state=34)
) -> Fitness: 0.7765671962215543

6: Pipeline(
	0: ExtraTreesClassifier(class_weight='balanced', criterion='entropy',
                     max_features='log2', min_samples_leaf=11,
                     min_samples_split=11, n_estimators=15, random_state=34)
) -> Fitness: 0.7751091312437384

7: Pipeline(
	0: VarianceThreshold()
	1: ExtraTreesClassifier(class_weight='balanced', criterion='entropy',
                     min_samples_leaf=9, min_samples_split=6, n_estimators=44,
                     random_state=34)
) -> Fitness: 0.7765743523686848

8: Pipeline(
	0: VarianceThreshold()
	1: ExtraTreesClassifier(bootstrap=True, class_weight='balanced_subsample',
                     criterion='entropy', max_features='log2',
                     min_samples_leaf=6, min_samples_split=17, n_estimators=16,
                     random_state=34)
) -> Fitness: 0.7725078717618433

9: Pipeline(
	0: RobustScaler(with_centering=False)
	1: LogisticRegression(C=0.39690409527053616, class_weight='balanced',
                   max_iter=1000, random_state=34)
) -> Fitness: 0.7571060541004723

10: Pipeline(
	0: MinMaxScaler()
	1: ExtraTreesClassifier(bootstrap=True, class_weight='balanced',
                     criterion='entropy', max_features='log2',
                     min_samples_leaf=6, min_samples_split=17, n_estimators=16,
                     random_state=34)
) -> Fitness: 0.7681175754973524

11: Pipeline(
	0: MaxAbsScaler()
	1: RandomForestClassifier(bootstrap=False, class_weight='balanced',
                       max_features=0.9077169560752465, min_samples_leaf=20,
                       min_samples_split=3, n_estimators=69, random_state=34)
) -> Fitness: 0.7481590811507084

12: Pipeline(
	0: RobustScaler(with_scaling=False)
	1: DecisionTreeClassifier(class_weight='balanced', max_depth=15,
                       max_features=0.24317302209575997, min_samples_leaf=20,
                       min_samples_split=11, random_state=34)
) -> Fitness: 0.739906254472592

13: Pipeline(
	0: LogisticRegression(C=0.12680085066185784, class_weight='balanced',
                   max_iter=1000, random_state=34, solver='newton-cg')
) -> Fitness: 0.7504830399313012

14: Pipeline(
	0: ExtraTreesClassifier(class_weight='balanced', max_features='log2',
                     min_samples_leaf=4, min_samples_split=15, n_estimators=26,
                     random_state=34)
) -> Fitness: 0.7712448117933304

15: Pipeline(
	0: AdaBoostClassifier(algorithm='SAMME',
                   estimator=DecisionTreeClassifier(class_weight='balanced',
                                                    criterion='entropy',
                                                    max_depth=3,
                                                    max_features=0.9947454811148053,
                                                    min_samples_leaf=3,
                                                    min_samples_split=11,
                                                    random_state=34),
                   learning_rate=0.28647243853835647, n_estimators=32,
                   random_state=34)
) -> Fitness: 0.7646647345069415

16: Pipeline(
	0: LogisticRegression(C=8.916039196759163, class_weight='balanced', max_iter=1000,
                   penalty='l1', random_state=34, solver='liblinear')
) -> Fitness: 0.7534242164018892

17: Pipeline(
	0: DecisionTreeClassifier(class_weight='balanced', max_depth=15,
                       max_features=0.24317302209575997, min_samples_leaf=20,
                       min_samples_split=15, random_state=34)
) -> Fitness: 0.739906254472592

18: Pipeline(
	0: MaxAbsScaler()
	1: ExtraTreesClassifier(bootstrap=True, class_weight='balanced',
                     criterion='entropy', min_samples_leaf=6,
                     min_samples_split=17, n_estimators=16, random_state=34)
) -> Fitness: 0.7681175754973524

19: Pipeline(
	0: MaxAbsScaler()
	1: ExtraTreesClassifier(bootstrap=True, class_weight='balanced',
                     criterion='entropy', max_features='log2',
                     min_samples_leaf=6, min_samples_split=17, n_estimators=16,
                     random_state=34)
) -> Fitness: 0.7681175754973524

Ensemble fitness: 0.8146647345069414
Weights: [0.9865976296076273, 0.9865976296076273, 0.9865976296076273, 1.0, 0.9831637784963512, 0.9767573734414343, 0.9749234359213228, 0.9767663743617785, 0.9716516013762405, 0.9522793705656402, 0.9661295367451322, 0.9410259699054226, 0.9306456585185834, 0.9439490187871711, 0.9700629389355059, 0.9617865926791014, 0.947648397048598, 0.9306456585185834, 0.9661295367451322, 0.9661295367451322]
Prediction: [0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0
 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 0 0 1 0 1 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0
 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0
 0 0 1 0 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0
 0 0 0 0 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0
 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0
 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1
 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0
 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 1
 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0
 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
 1 0 0 0 0 0 0 0 0]
