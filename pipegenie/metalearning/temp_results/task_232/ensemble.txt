0: Pipeline(
	0: MinMaxScaler()
	1: Balancing(strategy='none')
	2: DecisionTreeClassifier(class_weight='balanced', criterion='entropy',
                       max_depth=15, max_features=0.7878280266467313,
                       min_samples_leaf=3, min_samples_split=13,
                       random_state=42)
) -> Fitness: 0.9799797038925385

1: Pipeline(
	0: MaxAbsScaler()
	1: VarianceThreshold()
	2: Balancing(strategy='none')
	3: AdaBoostClassifier(algorithm='SAMME',
                   estimator=DecisionTreeClassifier(max_depth=14,
                                                    max_features=0.7557324856732839,
                                                    min_samples_leaf=3,
                                                    min_samples_split=6,
                                                    random_state=42),
                   learning_rate=0.0600035546333409, n_estimators=42,
                   random_state=42)
) -> Fitness: 0.9902887211164494

2: Pipeline(
	0: MaxAbsScaler()
	1: VarianceThreshold()
	2: Balancing(strategy='weighting')
	3: AdaBoostClassifier(algorithm='SAMME',
                   estimator=DecisionTreeClassifier(max_depth=14,
                                                    max_features=0.7557324856732839,
                                                    min_samples_leaf=3,
                                                    min_samples_split=6,
                                                    random_state=42),
                   learning_rate=0.0600035546333409, n_estimators=42,
                   random_state=42)
) -> Fitness: 0.9902887211164494

3: Pipeline(
	0: MinMaxScaler()
	1: Balancing(strategy='none')
	2: DecisionTreeClassifier(class_weight='balanced', criterion='entropy',
                       max_depth=14, max_features=0.7878280266467313,
                       min_samples_leaf=3, min_samples_split=13,
                       random_state=42)
) -> Fitness: 0.9799797038925385

4: Pipeline(
	0: RobustScaler()
	1: VarianceThreshold()
	2: Balancing(strategy='none')
	3: AdaBoostClassifier(algorithm='SAMME',
                   estimator=DecisionTreeClassifier(class_weight='balanced',
                                                    max_depth=14,
                                                    max_features=0.7095404868195881,
                                                    min_samples_leaf=7,
                                                    min_samples_split=18,
                                                    random_state=42),
                   learning_rate=0.0600035546333409, n_estimators=42,
                   random_state=42)
) -> Fitness: 0.9864360558224663

5: Pipeline(
	0: MaxAbsScaler()
	1: VarianceThreshold()
	2: Balancing(strategy='none')
	3: AdaBoostClassifier(algorithm='SAMME',
                   estimator=DecisionTreeClassifier(max_depth=14,
                                                    max_features=0.7557324856732839,
                                                    min_samples_leaf=3,
                                                    min_samples_split=6,
                                                    random_state=42),
                   learning_rate=0.0600035546333409, n_estimators=71,
                   random_state=42)
) -> Fitness: 0.9902887211164494

6: Pipeline(
	0: MaxAbsScaler()
	1: VarianceThreshold()
	2: Balancing(strategy='none')
	3: AdaBoostClassifier(algorithm='SAMME',
                   estimator=DecisionTreeClassifier(max_depth=22,
                                                    max_features=0.7557324856732839,
                                                    min_samples_leaf=3,
                                                    min_samples_split=6,
                                                    random_state=42),
                   learning_rate=0.0600035546333409, n_estimators=42,
                   random_state=42)
) -> Fitness: 0.9902887211164494

7: Pipeline(
	0: MinMaxScaler()
	1: Balancing(strategy='none')
	2: DecisionTreeClassifier(class_weight='balanced', criterion='entropy',
                       max_depth=6, max_features=0.3992804203467756,
                       min_samples_leaf=3, min_samples_split=20,
                       random_state=42)
) -> Fitness: 0.9742559526952114

8: Pipeline(
	0: MaxAbsScaler()
	1: VarianceThreshold()
	2: Balancing(strategy='weighting')
	3: AdaBoostClassifier(algorithm='SAMME',
                   estimator=DecisionTreeClassifier(max_depth=22,
                                                    max_features=0.7557324856732839,
                                                    min_samples_leaf=3,
                                                    min_samples_split=6,
                                                    random_state=42),
                   learning_rate=0.0600035546333409, n_estimators=42,
                   random_state=42)
) -> Fitness: 0.9902887211164494

9: Pipeline(
	0: MaxAbsScaler()
	1: VarianceThreshold()
	2: Balancing(strategy='none')
	3: AdaBoostClassifier(algorithm='SAMME',
                   estimator=DecisionTreeClassifier(max_depth=22,
                                                    max_features=0.7557324856732839,
                                                    min_samples_leaf=3,
                                                    min_samples_split=6,
                                                    random_state=42),
                   learning_rate=0.0600035546333409, n_estimators=82,
                   random_state=42)
) -> Fitness: 0.9902887211164494

10: Pipeline(
	0: MaxAbsScaler()
	1: VarianceThreshold()
	2: Balancing(strategy='weighting')
	3: AdaBoostClassifier(algorithm='SAMME',
                   estimator=DecisionTreeClassifier(max_depth=14,
                                                    max_features=0.7557324856732839,
                                                    min_samples_leaf=3,
                                                    min_samples_split=6,
                                                    random_state=42),
                   learning_rate=0.0600035546333409, n_estimators=71,
                   random_state=42)
) -> Fitness: 0.9902887211164494

11: Pipeline(
	0: MaxAbsScaler()
	1: VarianceThreshold()
	2: Balancing(strategy='none')
	3: AdaBoostClassifier(algorithm='SAMME',
                   estimator=DecisionTreeClassifier(max_depth=22,
                                                    max_features=0.7557324856732839,
                                                    min_samples_leaf=3,
                                                    min_samples_split=6,
                                                    random_state=42),
                   learning_rate=0.0600035546333409, n_estimators=81,
                   random_state=42)
) -> Fitness: 0.9902887211164494

12: Pipeline(
	0: MinMaxScaler()
	1: Balancing(strategy='weighting')
	2: DecisionTreeClassifier(class_weight='balanced', criterion='entropy',
                       max_depth=18, max_features=0.5166272517149342,
                       min_samples_leaf=7, min_samples_split=13,
                       random_state=42)
) -> Fitness: 0.9693831019129577

13: Pipeline(
	0: MaxAbsScaler()
	1: VarianceThreshold()
	2: Balancing(strategy='weighting')
	3: AdaBoostClassifier(algorithm='SAMME',
                   estimator=DecisionTreeClassifier(max_depth=22,
                                                    max_features=0.7557324856732839,
                                                    min_samples_leaf=3,
                                                    min_samples_split=6,
                                                    random_state=42),
                   learning_rate=0.0600035546333409, n_estimators=71,
                   random_state=42)
) -> Fitness: 0.9902887211164494

14: Pipeline(
	0: MaxAbsScaler()
	1: VarianceThreshold()
	2: Balancing(strategy='weighting')
	3: AdaBoostClassifier(algorithm='SAMME',
                   estimator=DecisionTreeClassifier(max_depth=14,
                                                    max_features=0.7557324856732839,
                                                    min_samples_leaf=3,
                                                    min_samples_split=6,
                                                    random_state=42),
                   learning_rate=0.0600035546333409, n_estimators=81,
                   random_state=42)
) -> Fitness: 0.9902887211164494

15: Pipeline(
	0: MaxAbsScaler()
	1: VarianceThreshold()
	2: Balancing(strategy='none')
	3: AdaBoostClassifier(algorithm='SAMME',
                   estimator=DecisionTreeClassifier(max_depth=14,
                                                    max_features=0.7557324856732839,
                                                    min_samples_leaf=3,
                                                    min_samples_split=6,
                                                    random_state=42),
                   learning_rate=0.0600035546333409, n_estimators=81,
                   random_state=42)
) -> Fitness: 0.9902887211164494

16: Pipeline(
	0: RobustScaler()
	1: SelectPercentile(percentile=75.79282794647945)
	2: Balancing(strategy='none')
	3: AdaBoostClassifier(algorithm='SAMME',
                   estimator=DecisionTreeClassifier(class_weight='balanced',
                                                    max_depth=14,
                                                    max_features=0.7095404868195881,
                                                    min_samples_leaf=12,
                                                    min_samples_split=13,
                                                    random_state=42),
                   learning_rate=0.0600035546333409, n_estimators=42,
                   random_state=42)
) -> Fitness: 0.9847385037748799

17: Pipeline(
	0: MaxAbsScaler()
	1: VarianceThreshold()
	2: Balancing(strategy='none')
	3: AdaBoostClassifier(algorithm='SAMME',
                   estimator=DecisionTreeClassifier(max_depth=14,
                                                    max_features=0.7557324856732839,
                                                    min_samples_leaf=3,
                                                    min_samples_split=6,
                                                    random_state=42),
                   learning_rate=0.0600035546333409, n_estimators=82,
                   random_state=42)
) -> Fitness: 0.9902887211164494

18: Pipeline(
	0: MaxAbsScaler()
	1: VarianceThreshold()
	2: Balancing(strategy='weighting')
	3: AdaBoostClassifier(algorithm='SAMME',
                   estimator=DecisionTreeClassifier(max_depth=22,
                                                    max_features=0.7557324856732839,
                                                    min_samples_leaf=3,
                                                    min_samples_split=6,
                                                    random_state=42),
                   learning_rate=0.0600035546333409, n_estimators=82,
                   random_state=42)
) -> Fitness: 0.9902887211164494

19: Pipeline(
	0: RobustScaler(with_scaling=False)
	1: VarianceThreshold()
	2: Balancing(strategy='weighting')
	3: AdaBoostClassifier(algorithm='SAMME',
                   estimator=DecisionTreeClassifier(max_depth=22,
                                                    max_features=0.7557324856732839,
                                                    min_samples_leaf=3,
                                                    min_samples_split=6,
                                                    random_state=42),
                   learning_rate=0.0600035546333409, n_estimators=42,
                   random_state=42)
) -> Fitness: 0.9902887211164494

Ensemble fitness: 0.9902887211164494
Weights: [0.9895898872681409, 1.0, 1.0, 0.9895898872681409, 0.9961095534950256, 1.0, 1.0, 0.9838100060322178, 1.0, 1.0, 1.0, 1.0, 0.9788893695770636, 1.0, 1.0, 1.0, 0.9943953543817886, 1.0, 1.0, 1.0]
Prediction: [2 2 2 1 2 1 1 2 2 2 2 2 2 2 2 2 2 2 2 4 1 2 2 2 3 1 2 2 4 3 2 1 2 2 3 2 2
 2 2 2 2 3 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 4 2 2 2 1 1 2 2
 1 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 3 4 2 1 1 2 2 2 2 4 2 2 2 2 2 1 2 2 2
 2 2 2 2 2 2 2 2 2 3 3 2 2 2 2 3 2 2 2 2 1 1 2 2 2 1 2 2 0 2 2 2 2 2 1 2 2
 4 2 2 2 3 2 2 3 4 2 2 2 4 0 2 2 3 2 2 2 2 2 3 2 2 2 2 2 1 0 2 2 2 2 2 1 3
 2 2 2 4 3 2 2 2 2 1 2 2 4 2 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2
 2 2 2 2 2 2 2 2 2 2 2 3 1 2 3 2 2 2 2 2 1 2 2 1 2 1 2 2 2 2 2 2 2 2 3 2 2
 1 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 1 2 2 2 4 3 2 2 2 2 2 2 2 2 2 2 2 2 2 1
 2 2 2 2 2 1 2 2 2 2 2 1 2 1 2 2 2 2 2 2 4 2 2 1 2 3 2 2 2 2 2 2 2 2 4 2 2
 1 2 2 1 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 2 2 1 2 2 2 2 2 2 2 2
 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 4 2 2 2 2 2 2 2 1 2
 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 1 3 2 2 2 2 2 2 2 2 2 1 2 2 3 2 2 2 2 3 1
 2 1 2 1 2 3 2 2 2 4 1 1 2 3 1 1 2 2 2 2 2 2 2 2 2 2 1 1 2 2 1 2 2 1 2 2 2
 3 2 2 2 2 4 2 1 2 3 2 2 3 2 2 2 2 2 2 2 2 2 3 3 1 2 2 2 2 2 1 2 2 2 2 2 4
 2 2 2 1 3 2 4 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 1 1 2 2 2 2 3 2 2 2 1 1 2
 2 2 4 2 2 3 2 2 2 2 4 2 2 1 1 2 3 3 2 1 2 2 3 2 1 4 2 2 2 3 2 2 2 2 2 2 3
 2 2 1 2 2 2 1 2 2 2]
